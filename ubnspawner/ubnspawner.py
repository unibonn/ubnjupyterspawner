from wrapspawner import WrapSpawner
from traitlets import Unicode, Type
from jinja2 import Template
from tornado.log import app_log
import os
import batchspawner
from traitlets.config.configurable import HasTraits

__all__ = ['ParamForm', 'FormMixin', 'UBNSpawner', 'UBNForm']


class ParamForm(HasTraits):
    """ Read a form to render from a file (set via source attribute) and
        include code to shape the form data into what the spawner needs. Reads
        the file path relative to the directory *this* module is installed in

        This class will be the @form_cls type attached to a custom spawner

        Subclass as needed to include your own methods
    """

    source = Unicode('')

    def __init__(self):
        pass

    def generate(self):
        path = os.path.join(os.path.dirname(__file__), self.source)
        with open(path) as f:
            return f.read()

    def parse_options(self, formdata):
        return {k: v[0] for k, v in formdata.items()}


class UBNForm(ParamForm):

    source = 'static/ubnform.html'

    def parse_options(self, formdata):
        data = super().parse_options(formdata)
        intsettings = {'req_memory', 'req_nprocs', 'req_ngpus'}
        data = {k: int(v) if v in intsettings else v for k, v in data.items()}
        data['req_runtime'] = data['req_runtime']
        app_log.info("form data = {0}".format(data))
        return data

    def generate(self):
        app_log.info("Generating form from: %s", self)
        return Template(super().generate()).render()


class FormMixin(HasTraits):
    """ Class to mix into a custom spawner that injects the form_cls attribute.

        Mix it in as the *first* parent so as to override the native options form stuff

        Calls the referenced form_cls (instantiated) methods to return formdata
        to the spawner.
    """

    form_cls = Type(UBNForm, help="Type of form class to use").tag(config=True)

    @staticmethod
    def options_form(self):
        return self.form_cls().generate()

    def options_from_form(self, formdata):
        return self.form_cls().parse_options(formdata)


class UBNSpawner(FormMixin, WrapSpawner):
    """ WrapSpawner modification to select the child class based on the
        form information generated by a form-class above. Subclasses must
        implement a set_class method that gets the formdata and must use that
        to return a Spawner class to use
    """

    def options_from_form(self, formdata):
        self.child_class = self.set_class(formdata)
        self.child_class.formdata = formdata
        if hasattr(self.child_class, 'form_cls'):
            self.log.debug("WrapForm: Set child config from child class's form_cls: %s",
                           self.child_class.form_cls)
            self.child_config = self.child_class.form_cls().parse_options(formdata)
            self.child_class.user_options = self.child_config
        else:
            self.log.debug("No child config found")
            self.child_config = {}
        self.log.info("Spawner child-config: %s", self.child_config)
        return {}

    def set_class(self, data):
        x = batchspawner.CondorSpawner
        x.form_cls = self.form_cls
        return x
